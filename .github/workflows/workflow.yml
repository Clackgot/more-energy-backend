name: CI/CD

# on: workflow_dispatch
on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Клонирование репозитория
        uses: actions/checkout@v3
      - name: Установка зависимостей
        run: npm ci
      - name: Тестирование приложения
        run: npm run test
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Клонирование репозитория
        uses: actions/checkout@v3
      - name: Установка зависимостей
        run: npm ci
      - name: Проверка синтаксиса линтером
        run: npm run lint

  build-and-deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

      HTTP_PORT: ${{ secrets.HTTP_PORT }}

      JWT_KEY: ${{ secrets.JWT_KEY }}
      JWT_EXPIRES: ${{ secrets.JWT_EXPIRES }}
    steps:
    - uses: actions/checkout@v3

    - name: Авторизация в DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Создание .env файла
      run: |
        echo "HTTP_PORT=${{secrets.HTTP_PORT}}" >> .env
        echo "JWT_EXPIRES=${{secrets.JWT_EXPIRES}}" >> .env
        echo "JWT_KEY=${{secrets.JWT_KEY}}" >> .env
        echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> .env
        echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> .env
        echo "POSTGRES_PORT=${{secrets.POSTGRES_PORT}}" >> .env
        echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> .env
    - name: Сборка образа
      run: docker compose build
    - name: Отправка образа в DockerHub
      run: docker compose push

  backend-run:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    env:
      HTTP_PORT : ${{secrets.HTTP_PORT}}
      JWT_EXPIRES : ${{secrets.JWT_EXPIRES}}
      JWT_KEY : ${{secrets.JWT_KEY}}
      POSTGRES_DB : ${{secrets.POSTGRES_DB}}
      POSTGRES_PASSWORD : ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_PORT : ${{secrets.POSTGRES_PORT}}
      POSTGRES_USER : ${{secrets.POSTGRES_USER}}
    steps:
      - name: Клонирование репозитория
        uses: actions/checkout@v2

      # Установка дополнительного ПО необходимого для работа ssh-action
      - name: Установка дополнительного ПО необходимого для работа ssh-action
        run: |
          sudo apt-get update
          sudo apt-get install openssh-client -y
      # Подключение к удаленному серверу и выполнение команд
      - name: Подключение к серверу
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          
          envs: HTTP_PORT, JWT_EXPIRES, JWT_KEY, POSTGRES_DATABASE, POSTGRES_PASSWORD, POSTGRES_PORT, POSTGRES_USERNAME
          script: |
            echo "HTTP_PORT=${{secrets.HTTP_PORT}}" >> .env
            echo "JWT_EXPIRES=${{secrets.JWT_EXPIRES}}" >> .env
            echo "JWT_KEY=${{secrets.JWT_KEY}}" >> .env
            echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> .env
            echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> .env
            echo "POSTGRES_PORT=${{secrets.POSTGRES_PORT}}" >> .env
            echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> .env
            cd ~ && rm -rf more-energy-backend/ && git clone git@github.com:Clackgot/more-energy-backend.git && cd more-energy-backend/ && cp env.example .env && docker-compose down --remove-orphans && docker compose up --pull --force-recreate